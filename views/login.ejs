<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta name="viewport" content="width=1,initial-scale=1,user-scalable=1" />

	<!-- Chrome, Firefox OS and Opera -->
	<meta name="theme-color" content="#007bff">
	<!-- Windows Phone -->
	<meta name="msapplication-navbutton-color" content="#007bff">
	<!-- iOS Safari -->
	<meta name="apple-mobile-web-app-status-bar-style" content="#007bff">
	<link rel='shortcut icon' type='image/x-icon' href='/favicon.ico' />


	<title>Login ITSC APPs</title>
	<script>
		if ('serviceWorker' in navigator) {
			navigator.serviceWorker.register('/service-worker.js')
				.then( reg => console.log('Registration succeeded. Scope is ' + reg.scope) )
				.catch( error => console.log('Registration failed with ' + error) )
	
		} else {
			alert('Su navegador web no soporta tecnologia Service Workers, por lo cual no podrá ser usada en modo offline')
		}
	</script>	
	
	<link rel="stylesheet" href="/vendor/bootstrap.min.css">
	<link rel="stylesheet" type="text/css" href="/login/styles.css" />
	<style>
		/*checkbox style*/
		.container2 {
			display: block;
			position: relative;
			padding-left: 35px;
			margin-bottom: 12px;
			cursor: pointer;
			font-size: 18px;
			-webkit-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;
		}

		/* Hide the browser's default checkbox */
		.container2 input {
			position: absolute;
			opacity: 0;
			cursor: pointer;
		}

		/* Create a custom checkbox */
		.checkmark {
			position: absolute;
			top: 0;
			left: 0;
			height: 25px;
			width: 25px;
			background-color: #eee;
		}

		/* On mouse-over, add a grey background color */
		.container2:hover input ~ .checkmark {
			background-color: #ccc;
		}

		/* When the checkbox is checked, add a blue background */
		.container2 input:checked ~ .checkmark {
			background-color: #2196F3;
		}

		/* Create the checkmark/indicator (hidden when not checked) */
		.checkmark:after {
			content: "";
			position: absolute;
			display: none;
		}

		/* Show the checkmark when checked */
		.container2 input:checked ~ .checkmark:after {
			display: block;
		}

		/* Style the checkmark/indicator */
		.container2 .checkmark:after {
			left: 9px;
			top: 5px;
			width: 5px;
			height: 10px;
			border: solid white;
			border-width: 0 3px 3px 0;
			-webkit-transform: rotate(45deg);
			-ms-transform: rotate(45deg);
			transform: rotate(45deg);
		}
	</style>

</head>
<body>

	<section class="container" id="forma-login" style="display: block">
			<section class="login-form">
				<form id="form-login" role="login" onsubmit="return submitFormLogin(this)">
					<img src="/logo_itsc.png" style="max-width:100%; max-height:100%;" />
					<input type="text" name="usuario" placeholder="Usuario" required class="form-control input-lg" />
					<input type="password" name="clave" placeholder="Contraseña" required class="form-control input-lg" />
					<label class="container2">Seleccionar Rol
						<input type="checkbox" name="seleccionar_rol" checked="checked" value="Y">
						<span class="checkmark"></span>
					</label>
					<button type="submit" class="btn btn-lg btn-primary btn-block">Ingresar</button>
				</form>

				<div class="form-links">
					<a href="#">www.itsc.ec</a>
				</div>
			</section>
	</section>

	<section class="container" id="forma-rol" style="display: none">
			<section class="login-form">
				<form id="form-rol" role="login" onsubmit="return submitRolLogin(this)">
                    <img src="/logo_itsc.png" style="max-width:100%; max-height:100%;" />
                    <input hidden type="text" name="usuario" value="" required class="form-control input-lg" />
                    <input hidden type="text" name="clave" value="" required class="form-control input-lg" />
					Grupo Empresarial <select id="ad_client_id" name="ad_client_id" required class="form-control input-lg">
					</select>
					Rol <select id="ad_role_id" name="ad_role_id" required class="form-control input-lg">
					</select>
					Organizaciòn <select id="ad_org_id" name="ad_org_id" required class="form-control input-lg">
					</select>
					Almacèn <select id="m_warehouse_id" name="m_warehouse_id" class="form-control input-lg">
					</select>  
					<button type="submit" class="btn btn-lg btn-primary btn-block">Ingresar</button>
				</form>
				<div class="form-links">
					<a href="#">www.itsc.ec</a>
				</div>
			</section>
	</section>
	
	<script src="/vendor/jquery-3.3.1.slim.min.js"></script>
	<script src="/vendor/popper.min.js"></script>
	<script src="/vendor/bootstrap.min.js"></script>
	<script src="/vendor/bootstrap-notify.js"></script>
	<script src="/vendor/pouchdb-7.0.0.js"></script>

    <script>

		function submitFormLogin (form) {
			var usuario = form.elements["usuario"].value
			var clave = form.elements["clave"].value
			var seleccionar_rol = form.elements["seleccionar_rol"].checked ? 'Y' : 'N'

			var url = new URL(`${window.location.origin}/login/data/`)
			url.search = new URLSearchParams({usuario, clave, seleccionar_rol})

			fetch(url).then(async response => {
				var data;
				console.log('response', response)

				if (response.ok) {
					data = await response.json()

					if (data.token) {
						await setToken(data.token)
					} else {
						afterLogin(data.usr, data.pass, data.roles)
					}

					console.log('login ok', data)
				} else {
					data = await response.text()
					$.notify(data,{ type: 'danger' })
					console.error(data)
				}

			}).catch(e => {
				console.error(e)
				$.notify({ title: '<strong>Posible error de conexión</strong>', message: `${e}`},{ type: 'danger' })
			})

			return false;
		}

		async function setToken (token) {
			var db = new PouchDB('itscV1.0', {adapter: 'idb'});	

			try {
				var doc = await db.get('itsc-login-token')
				var response = await db.put({
					_id: 'itsc-login-token',
					_rev: doc._rev,
					token
				})
				window.location.replace(`/`)

			} catch (err) {
				if (err.status === 404) {
					await db.put({
						_id: 'itsc-login-token',
						token
					})
					window.location.replace(`/`)
				} else {
					console.log('error db', err);
					alert('No se ha podido guardar la session')
				}
			}
		}

		function submitRolLogin (form) {
			var usuario = form.elements["usuario"].value
			var clave = form.elements["clave"].value
			var ad_client_id = form.elements["ad_client_id"].value
			var ad_role_id = form.elements["ad_role_id"].value
			var ad_org_id = form.elements["ad_org_id"].value
			var m_warehouse_id = form.elements["m_warehouse_id"].value

			var url = new URL(`${window.location.origin}/login/rol/data/`)
			url.search = new URLSearchParams({usuario, clave, ad_client_id, ad_role_id, ad_org_id, m_warehouse_id})
			
			fetch(url).then(async response => {
				var data = await response.text()
				if (response.ok) {
					console.log('token', data)
					await setToken(data)
				} else {
					console.error(data)
					$.notify(data,{ type: 'danger' })
				}

			}).catch(e => {
				console.error(e)
				$.notify({ 
					title: '<strong>Posible error de conexión</strong>', 
					message: `${e} Login offline solo es posible con los mismos datos que ingreso cuando tenia conexión`},
				{ type: 'danger' })
			})


			return false;
		}


		/**
		 * Funcion que activa la seleccion de roles
		*/
		function afterLogin(usuario, clave, roles) {
			var form_rol = document.getElementById('form-rol')

			document.getElementById('forma-rol').style.display = 'block'
			document.getElementById('forma-login').style.display = 'none'

			form_rol.elements["usuario"].value = usuario
			form_rol.elements["clave"].value = clave
			
			var data = roles

			var ad_client_id = document.getElementById('ad_client_id')
			var ad_role_id = document.getElementById('ad_role_id')
			var ad_org_id = document.getElementById('ad_org_id')
			var m_warehouse_id = document.getElementById('m_warehouse_id')
			
			updateSelect(ad_client_id, cargarClientes());

			//Actualiza la lista de ROLLES al cambiar esto
			ad_client_id.addEventListener('change', evt => {
				var temp = data.filter(rec => rec.ad_client_id === ad_client_id.value)

				temp = temp.map(rec => `${rec.ad_role_id}////${rec.rol}`)
				temp = [...new Set(temp)]
				temp = temp.map(r => r.split('////'))
				temp = temp.map(r => {
					return { value: r[0], text: r[1] }
				})

				updateSelect(ad_role_id, temp)
				updateSelect(ad_org_id, [], true)
				updateSelect(m_warehouse_id, [], true)
			}, false)

			//Actualiza la lista de organizaciones al cambiar el ROL
			ad_role_id.addEventListener('change', evt => { 
				var temp = data.filter(rec => rec.ad_client_id === ad_client_id.value && rec.ad_role_id === ad_role_id.value)

				temp = temp.map(rec => `${rec.ad_org_id || ''}////${rec.organizacion || ''}`)
				temp = [...new Set(temp)]
				temp = temp.map(r => r.split('////'))
				temp = temp.map(r => {
					return { value: r[0], text: r[1] }
				})

				updateSelect(ad_org_id, temp)
				updateSelect(m_warehouse_id, [], true)
			}, false)


			ad_org_id.addEventListener('change', evt => { 
				var temp = data.filter(rec => rec.ad_client_id === ad_client_id.value && rec.ad_role_id === ad_role_id.value && rec.ad_org_id === ad_org_id.value)

				temp = temp.map(rec => `${rec.m_warehouse_id || ''}////${rec.warehouse || ''}`)
				temp = [...new Set(temp)]
				temp = temp.map(r => r.split('////'))
				temp = temp.map(r => {
					return { value: r[0], text: r[1] }
				})

				updateSelect(m_warehouse_id, temp)
			}, false)



			function updateSelect (select, data, flag) {
				data = data.filter(rec => rec.value !== '')
				while (select.options.length > 0)                
					select.remove(0);
				
				if (!flag) {
					var option = document.createElement('option')
					option.value = ""
					option.text = "Ingrese una opciòn";
					option.selected = true;
					option.disabled = true;	
					select.add(option) 
				}

				for (var rec of data) {
					var option = document.createElement('option')
					option.value = rec.value;
					option.text = rec.text;
					select.add(option) 
				}			       
			}

			function cargarClientes () {
				var temp = data.map(rec => `${rec.ad_client_id}////${rec.grupo}`)
				temp = [...new Set(temp)]
				temp = temp.map(r => r.split('////'))
				return temp.map(r => {
					return { value: r[0], text: r[1] }
				})
			}
		}
    </script>
</body>
</html>